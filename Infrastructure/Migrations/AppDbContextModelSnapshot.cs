// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Models.Classrooms.Classroom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ClassroomName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Classrooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4be5d5f7-871f-43c6-ae26-ccd1146d00e8"),
                            ClassroomName = "Newton"
                        },
                        new
                        {
                            Id = new Guid("0e328c49-744d-4ffb-bc4b-dc8de77cb221"),
                            ClassroomName = "Einstein"
                        },
                        new
                        {
                            Id = new Guid("3248e757-6115-4f49-ab55-cbe8f59c03dd"),
                            ClassroomName = "Tesla"
                        },
                        new
                        {
                            Id = new Guid("06b29e90-bc09-4660-ab5c-22c9644558d0"),
                            ClassroomName = "Curie"
                        },
                        new
                        {
                            Id = new Guid("67fdc2f1-c45b-4b73-90fc-65b66c17011f"),
                            ClassroomName = "Kepler"
                        },
                        new
                        {
                            Id = new Guid("fc714ffd-1756-47de-be5e-5aec05dac97f"),
                            ClassroomName = "Darwin"
                        },
                        new
                        {
                            Id = new Guid("0d8a9a7e-939e-434e-96f2-e76170727b3e"),
                            ClassroomName = "Bohr"
                        },
                        new
                        {
                            Id = new Guid("91543ee5-15d9-4071-951d-d90dbf2f2eb1"),
                            ClassroomName = "Mendel"
                        },
                        new
                        {
                            Id = new Guid("e5d9845b-6ec1-4c4a-9507-c15b6a8935e0"),
                            ClassroomName = "Pasteur"
                        });
                });

            modelBuilder.Entity("Domain.Models.Course.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec63f5b8-fd38-4191-aadb-2240632646bf"),
                            CourseName = "Svenska 1"
                        },
                        new
                        {
                            Id = new Guid("dea104a2-3e97-4e79-9db8-793826bfe247"),
                            CourseName = "Svenska 2"
                        },
                        new
                        {
                            Id = new Guid("de99361c-bc01-4f4c-974e-bcafdfba7d0d"),
                            CourseName = "Svenska 3"
                        },
                        new
                        {
                            Id = new Guid("d9841bad-a7b7-4604-8056-61df1819ff30"),
                            CourseName = "Engelska 5"
                        },
                        new
                        {
                            Id = new Guid("ac764b5f-0e4e-4772-a97c-03b58112bcc6"),
                            CourseName = "Engelska 6"
                        },
                        new
                        {
                            Id = new Guid("afc126d3-7c61-42a9-8da9-d1c5e0ab6da0"),
                            CourseName = "Engelska 7"
                        },
                        new
                        {
                            Id = new Guid("eecbc713-ca88-4a7b-832e-8c5b2fccb4cc"),
                            CourseName = "Matematik 1"
                        },
                        new
                        {
                            Id = new Guid("749d5335-9bfa-4bd5-ad65-d008bf1ef422"),
                            CourseName = "Matematik 2"
                        },
                        new
                        {
                            Id = new Guid("c67ae67a-6ea9-4f11-a754-42ccdd957b63"),
                            CourseName = "Matematik 3"
                        },
                        new
                        {
                            Id = new Guid("7e4688d2-bb2f-423a-b37e-1bd213f1473b"),
                            CourseName = "Matematik 4"
                        },
                        new
                        {
                            Id = new Guid("8b06485b-2133-45a3-a5e9-90a91dab6f0f"),
                            CourseName = "Naturkunskap 1a1"
                        },
                        new
                        {
                            Id = new Guid("82507182-a658-4bca-9709-f043983e61d3"),
                            CourseName = "Naturkunskap 1a2"
                        },
                        new
                        {
                            Id = new Guid("7118050e-dea1-4ffc-9abb-7856e14837d5"),
                            CourseName = "Samhällskunskap 1"
                        },
                        new
                        {
                            Id = new Guid("c2ed834c-d25a-4d60-94b1-aaaa0e6979fa"),
                            CourseName = "Samhällskunskap 2"
                        },
                        new
                        {
                            Id = new Guid("b4b63d97-4b31-4595-8f8d-4c22c0744255"),
                            CourseName = "Fysik 1"
                        },
                        new
                        {
                            Id = new Guid("f3b13fe2-3227-4177-829f-10243b6bc182"),
                            CourseName = "Fysik 2"
                        },
                        new
                        {
                            Id = new Guid("edf277e8-a90a-4f71-a4ab-bb6796e9e9d7"),
                            CourseName = "Kemi 1"
                        },
                        new
                        {
                            Id = new Guid("2338d346-5ecb-4ff9-bb1a-db3b58c3f209"),
                            CourseName = "Kemi 2"
                        },
                        new
                        {
                            Id = new Guid("9de43171-8f30-4b20-9ed9-c1a274296000"),
                            CourseName = "Religion 1"
                        },
                        new
                        {
                            Id = new Guid("712de016-7168-4ca4-864f-1675151efb65"),
                            CourseName = "Biologi 1"
                        },
                        new
                        {
                            Id = new Guid("0ca46512-3ae8-48ba-a907-e0e587f28175"),
                            CourseName = "Geografi 1"
                        },
                        new
                        {
                            Id = new Guid("70aaaac6-0deb-4262-a31d-9f412349b9ba"),
                            CourseName = "Psykologi 1"
                        },
                        new
                        {
                            Id = new Guid("fe46f0c3-e552-4fd2-b93f-e6eaabcfea65"),
                            CourseName = "Filosofi 1"
                        },
                        new
                        {
                            Id = new Guid("e8ab0947-84d9-4768-8d28-5d1aa539e868"),
                            CourseName = "Programmering 1"
                        },
                        new
                        {
                            Id = new Guid("c0fbf20d-9f2a-41c3-8ccc-d28c6a2beec6"),
                            CourseName = "Programmering 2"
                        },
                        new
                        {
                            Id = new Guid("12804c9e-5177-4f3b-97a9-dce6075a35f9"),
                            CourseName = "Ekonomi 1"
                        },
                        new
                        {
                            Id = new Guid("7da9c36c-9d6a-4583-bcc1-dbd7cf479f03"),
                            CourseName = "Ekonomi 2"
                        });
                });

            modelBuilder.Entity("Domain.Models.Student.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Student");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c641cb06-b599-4551-b7d4-354d1a4408da"),
                            Address = "Kungsgatan 123, Göteborg",
                            DateOfBirth = new DateOnly(2006, 5, 12),
                            Email = "elsa.andersson@schoolsync.com",
                            FirstName = "Elsa",
                            LastName = "Andersson",
                            PhoneNumber = "+46 70 123 45 67"
                        },
                        new
                        {
                            Id = new Guid("d40be13a-ce52-427e-8375-3c45781cc3c3"),
                            Address = "Avenyn 456, Göteborg",
                            DateOfBirth = new DateOnly(2005, 8, 21),
                            Email = "oscar.bergqvist@schoolsync.com",
                            FirstName = "Oscar",
                            LastName = "Bergqvist",
                            PhoneNumber = "+46 72 345 67 89"
                        },
                        new
                        {
                            Id = new Guid("e76a4cb4-e66e-41db-a0c1-e8a76af30638"),
                            Address = "Vasagatan 789, Göteborg",
                            DateOfBirth = new DateOnly(2007, 11, 3),
                            Email = "hanna.carlsson@schoolsync.com",
                            FirstName = "Hanna",
                            LastName = "Carlsson",
                            PhoneNumber = "+46 73 567 89 01"
                        },
                        new
                        {
                            Id = new Guid("7fb401e8-e0a4-48b0-a450-c127ef534c4e"),
                            Address = "Haga Nygata 101, Göteborg",
                            DateOfBirth = new DateOnly(2007, 2, 15),
                            Email = "alexander.dahlstrom@schoolsync.com",
                            FirstName = "Alexander",
                            LastName = "Dahlström",
                            PhoneNumber = "+46 76 789 01 23"
                        },
                        new
                        {
                            Id = new Guid("f07f225e-d675-468f-aa33-9d925ce5f7f4"),
                            Address = "Linnégatan 202, Göteborg",
                            DateOfBirth = new DateOnly(2006, 4, 28),
                            Email = "emma.ekstrom@schoolsync.com",
                            FirstName = "Emma",
                            LastName = "Ekström",
                            PhoneNumber = "+46 72 123 45 67"
                        },
                        new
                        {
                            Id = new Guid("41b5b22c-2dac-4350-ad8a-a65b7ddf3602"),
                            Address = "Kungsportsavenyn 303, Göteborg",
                            DateOfBirth = new DateOnly(2005, 7, 8),
                            Email = "liam.forsberg@schoolsync.com",
                            FirstName = "Liam",
                            LastName = "Forsberg",
                            PhoneNumber = "+46 70 345 67 89"
                        },
                        new
                        {
                            Id = new Guid("da756194-3b79-4027-ad93-8abd35fddb57"),
                            Address = "Första Långgatan 404, Göteborg",
                            DateOfBirth = new DateOnly(2007, 10, 19),
                            Email = "ella.gustavsson@schoolsync.com",
                            FirstName = "Ella",
                            LastName = "Gustavsson",
                            PhoneNumber = "+46 73 567 89 01"
                        },
                        new
                        {
                            Id = new Guid("26db5dd2-d5fa-43f7-8c12-f5596a9cba4a"),
                            Address = "Andra Långgatan 505, Göteborg",
                            DateOfBirth = new DateOnly(2005, 1, 31),
                            Email = "oliver.hedlund@schoolsync.com",
                            FirstName = "Oliver",
                            LastName = "Hedlund",
                            PhoneNumber = "+46 76 789 01 23"
                        },
                        new
                        {
                            Id = new Guid("8d2df7da-9528-4bec-8157-6d68a506341e"),
                            Address = "Västra Hamngatan 606, Göteborg",
                            DateOfBirth = new DateOnly(2006, 3, 14),
                            Email = "maja.isaksson@schoolsync.com",
                            FirstName = "Maja",
                            LastName = "Isaksson",
                            PhoneNumber = "+46 72 123 45 67"
                        },
                        new
                        {
                            Id = new Guid("d32ff386-572f-4289-af4e-2f1dc1e6320c"),
                            Address = "Storgatan 707, Göteborg",
                            DateOfBirth = new DateOnly(2005, 6, 25),
                            Email = "william.johansson@schoolsync.com",
                            FirstName = "William",
                            LastName = "Johansson",
                            PhoneNumber = "+46 70 345 67 89"
                        },
                        new
                        {
                            Id = new Guid("0c33b5d9-7794-409d-b087-13f4b660f69a"),
                            Address = "Östra Hamngatan 808, Göteborg",
                            DateOfBirth = new DateOnly(2007, 9, 5),
                            Email = "alice.karlsson@schoolsync.com",
                            FirstName = "Alice",
                            LastName = "Karlsson",
                            PhoneNumber = "+46 73 567 89 01"
                        },
                        new
                        {
                            Id = new Guid("5166f638-9bdc-47cb-af70-7d4c1e4f21bc"),
                            Address = "Nordenskiöldsgatan 909, Göteborg",
                            DateOfBirth = new DateOnly(2005, 12, 16),
                            Email = "noah.lindgren@schoolsync.com",
                            FirstName = "Noah",
                            LastName = "Lindgren",
                            PhoneNumber = "+46 76 789 01 23"
                        },
                        new
                        {
                            Id = new Guid("09aad369-9f7c-49d7-bef2-b70cab91e01c"),
                            Address = "Lisebergsgatan 1111, Göteborg",
                            DateOfBirth = new DateOnly(2006, 2, 27),
                            Email = "astrid.svensson@schoolsync.com",
                            FirstName = "Astrid",
                            LastName = "Svensson",
                            PhoneNumber = "+46 72 123 45 67"
                        },
                        new
                        {
                            Id = new Guid("b8c16754-b5d9-4218-8bb6-efccaa56be40"),
                            Address = "Fiskebäcksgatan 1212, Göteborg",
                            DateOfBirth = new DateOnly(2005, 5, 9),
                            Email = "erik.toresson@schoolsync.com",
                            FirstName = "Erik",
                            LastName = "Toresson",
                            PhoneNumber = "+46 70 345 67 89"
                        },
                        new
                        {
                            Id = new Guid("d7160151-5ae1-4b2e-8898-4cf280e77a60"),
                            Address = "Karl Johansgatan 1313, Göteborg",
                            DateOfBirth = new DateOnly(2007, 8, 20),
                            Email = "amanda.vikstrom@schoolsync.com",
                            FirstName = "Amanda",
                            LastName = "Vikström",
                            PhoneNumber = "+46 73 567 89 01"
                        },
                        new
                        {
                            Id = new Guid("5e6d8c29-e081-4712-901c-3ab24b48943f"),
                            Address = "Magasinsgatan 1414, Göteborg",
                            DateOfBirth = new DateOnly(2006, 11, 1),
                            Email = "gustav.werner@schoolsync.com",
                            FirstName = "Gustav",
                            LastName = "Werner",
                            PhoneNumber = "+46 76 789 01 23"
                        },
                        new
                        {
                            Id = new Guid("82e8235a-b001-40a5-9ef3-046abd315200"),
                            Address = "Södra Hamngatan 1515, Göteborg",
                            DateOfBirth = new DateOnly(2005, 1, 15),
                            Email = "sofia.aberg@schoolsync.com",
                            FirstName = "Sofia",
                            LastName = "Åberg",
                            PhoneNumber = "+46 72 123 45 67"
                        },
                        new
                        {
                            Id = new Guid("454c161a-9f8d-43ab-88e9-9ee7d474f911"),
                            Address = "Götgatan 1616, Göteborg",
                            DateOfBirth = new DateOnly(2007, 4, 28),
                            Email = "filip.oberg@schoolsync.com",
                            FirstName = "Filip",
                            LastName = "Öberg",
                            PhoneNumber = "+46 70 345 67 89"
                        },
                        new
                        {
                            Id = new Guid("83cec443-c803-4393-881b-1c01a4d669a9"),
                            Address = "Ekelundsgatan 1717, Göteborg",
                            DateOfBirth = new DateOnly(2005, 7, 8),
                            Email = "viktoria.pettersson@schoolsync.com",
                            FirstName = "Viktoria",
                            LastName = "Pettersson",
                            PhoneNumber = "+46 73 567 89 01"
                        },
                        new
                        {
                            Id = new Guid("f6ce7c26-4527-42d8-9ef6-3e3f821de56d"),
                            Address = "Färjenäsgatan 1818, Göteborg",
                            DateOfBirth = new DateOnly(2006, 10, 19),
                            Email = "axel.sjoberg@schoolsync.com",
                            FirstName = "Axel",
                            LastName = "Sjöberg",
                            PhoneNumber = "+46 76 789 01 23"
                        },
                        new
                        {
                            Id = new Guid("30cfcb4a-9083-4134-aafc-1a2428a4a506"),
                            Address = "Trädgårdsgatan 1919, Göteborg",
                            DateOfBirth = new DateOnly(2005, 12, 31),
                            Email = "isabelle.holm@schoolsync.com",
                            FirstName = "Isabelle",
                            LastName = "Holm",
                            PhoneNumber = "+46 72 123 45 67"
                        },
                        new
                        {
                            Id = new Guid("371d0743-384b-483b-9886-90ff0e674a3d"),
                            Address = "Mölndalsvägen 2020, Göteborg",
                            DateOfBirth = new DateOnly(2007, 2, 14),
                            Email = "marcus.lundqvist@schoolsync.com",
                            FirstName = "Marcus",
                            LastName = "Lundqvist",
                            PhoneNumber = "+46 70 345 67 89"
                        });
                });

            modelBuilder.Entity("Domain.Models.Teacher.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Teacher");

                    b.HasData(
                        new
                        {
                            Id = new Guid("995b37b8-2e02-4628-8abe-bb6cdbe53bc8"),
                            Address = "Skolgatan 1, Göteborg",
                            DateOfBirth = new DateOnly(1980, 6, 15),
                            Email = "karin.lind@schoolsync.com",
                            FirstName = "Karin",
                            LastName = "Lind",
                            PhoneNumber = "+46 70 123 45 67"
                        },
                        new
                        {
                            Id = new Guid("dfda95d4-42f9-49d3-b947-dc89039a1b97"),
                            Address = "Lärargatan 2, Göteborg",
                            DateOfBirth = new DateOnly(1975, 9, 21),
                            Email = "anders.svensson@schoolsync.com",
                            FirstName = "Anders",
                            LastName = "Svensson",
                            PhoneNumber = "+46 72 345 67 89"
                        },
                        new
                        {
                            Id = new Guid("906558a8-ff83-476f-a0b8-833b6c50e2a3"),
                            Address = "Undervisningsvägen 3, Göteborg",
                            DateOfBirth = new DateOnly(1982, 11, 3),
                            Email = "camilla.eriksson@schoolsync.com",
                            FirstName = "Camilla",
                            LastName = "Eriksson",
                            PhoneNumber = "+46 73 567 89 01"
                        },
                        new
                        {
                            Id = new Guid("aae634f2-80bb-4487-8901-015aad1dc59f"),
                            Address = "Lärarvägen 4, Göteborg",
                            DateOfBirth = new DateOnly(1978, 2, 15),
                            Email = "mats.andersson@schoolsync.com",
                            FirstName = "Mats",
                            LastName = "Andersson",
                            PhoneNumber = "+46 76 789 01 23"
                        },
                        new
                        {
                            Id = new Guid("a3f3974f-4d12-4b9a-8ac4-34746aa899f4"),
                            Address = "Pedagogvägen 5, Göteborg",
                            DateOfBirth = new DateOnly(1985, 4, 28),
                            Email = "anna.hedstrom@schoolsync.com",
                            FirstName = "Anna",
                            LastName = "Hedström",
                            PhoneNumber = "+46 72 123 45 67"
                        },
                        new
                        {
                            Id = new Guid("511420cb-c08c-4266-9e02-1c554371cb2e"),
                            Address = "Lärarstråket 6, Göteborg",
                            DateOfBirth = new DateOnly(1973, 7, 8),
                            Email = "erik.berg@schoolsync.com",
                            FirstName = "Erik",
                            LastName = "Berg",
                            PhoneNumber = "+46 70 345 67 89"
                        },
                        new
                        {
                            Id = new Guid("9f050233-e2e6-4a69-aaa4-c43f0a590d16"),
                            Address = "Utvecklingsgatan 7, Göteborg",
                            DateOfBirth = new DateOnly(1987, 10, 19),
                            Email = "sara.johansson@schoolsync.com",
                            FirstName = "Sara",
                            LastName = "Johansson",
                            PhoneNumber = "+46 73 567 89 01"
                        },
                        new
                        {
                            Id = new Guid("a7771438-7835-43e3-9d94-39d2c88bd07b"),
                            Address = "Lärarvägen 8, Göteborg",
                            DateOfBirth = new DateOnly(1979, 1, 31),
                            Email = "johan.lund@schoolsync.com",
                            FirstName = "Johan",
                            LastName = "Lund",
                            PhoneNumber = "+46 76 789 01 23"
                        });
                });

            modelBuilder.Entity("Domain.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("02953bf8-a400-469a-b2f4-77f5d06fc7f9"),
                            Password = "$2a$11$lKbpQSxaWMB9vs0CjTnygOXNvy0uZx82xj9TCZ9rt5OPRG59raps6",
                            Username = "admin"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
